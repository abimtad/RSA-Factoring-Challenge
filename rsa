import sys
import math

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def pollard_rho(n):
    if n % 2 == 0:
        return 2
    x = 2
    y = 2
    d = 1
    f = lambda x: (x ** 2 + 1) % n
    while d == 1:
        x = f(x)
        y = f(f(y))
        d = gcd(abs(x - y), n)
    return d

def factorize_rsa(num):
    factors = []
    while num > 1:
        factor = pollard_rho(num)
        factors.append(factor)
        num //= factor
    return factors

def main(input_file):
    with open(input_file, 'r') as file:
        for line in file:
            num = int(line.strip())
            factors = factorize_rsa(num)
            factors.sort()
            prime_factors = [factor for factor in factors if is_prime(factor)]
            p, q = prime_factors[0], prime_factors[1]
            print(f"{num}={p}*{q}")

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: ./rsa <file>")
        sys.exit(1)
    
    input_file = sys.argv[1]
    main(input_file)
